Cursito de react.
#Cuando usar React vs Framework
- JavaScript -> React -> libreria
- Numero 1 en el mercado laboral
- Angular -> Vue

React proviene de META como una solucion para la programacion con Clien Side Rendering
(Renderizado del Lado del Cliente) o Aplicacion de pagina Unica (SPA)

Libreria para generar aplicaciones basados en componentes

Angular JS -> MVC
View ->Muestra lo que hay en la pantalla
Model -> el lugar donde se guardan los valores de las variables
Controller -> Se encarga de modificar los valores / contienen la logica de negocio

React -> NO hace mas MVC, hace una combinacion entre MVVM / MVC
Angular JS =>
    - HTML
    - CSS
    - Controller

Componente =>
    - HTML -> Va a tener la capacidad de modificar el modelo
    - CSS
    - Typescript / JavaScript

Controller -> Typescript -> Modelo -> Vista -> Modelo

Angular JS -> se queda atrás 
    - Verbose (muy complejo)
    - hay mucha cantidad de codigo
    - dificil de aprender

React -> Se vuelve popular
    - Es mas rapido
    - Facil de aprender
    - Simple
    - Comodo

Sigue siendo una libreria, solamente tiene codigo de terceros que aumenta la funcionalidad de algo
No tiene enrutamiento propio, casi nada. Por eso hay que agregarle un conjunto de librerias a utilizar

Cuando es conveniente usar React?
Siempre que necesitemos:
    - App a medida
    - Simplicidad
    - Minimiza el peso ya que solo se implementa lo que se necesita
    - Prototipos
    - Single Page Applications (SPA) -> CSR (Client Side Rendering) -> TODO EN EL CLIENTE -> Apps PRIVADAS 

Hay frameworks de react 
- Solid Js -> Es como deberia haber sido React desde un principio
   - No hay trabajo de Solid Js
   - Reactivivdad Real (Signals) 
- NextJS -> Genial para gente que ya sabe - aplicaciones privadas y publicas
   - Necesito SEO ?
   - Necesito todo lo que me brinda??
   - Tiene su forma de pensar diferente - CSR (El browser renderiza todo) - SSR (El servidor Renderiza todo) / SSG (Server Side Generation)
   - Hace todo en SSR.
- Remix -> Esta pensado para el SSR
   - SEO crucial
   - Performance
   - Data fetching avanzado
   - Routing
   - Comodidad
   - No hay trabajo

React 19
   - useCallback
   - useMemo

CREANDO NUESTRO PROYECTO EN REACT
una metadata es info extra que añadimos extra para que los anvegadores lo usen para renderizar o SEO
Al crear una build con bun se forma un bandler, este va a ser un script importado dentro de la carpeta de assets en el archivo inddex.js, un bundel ciosta de 3 procesos,
primero minimiza el codigo, luego lo uglifea (uglifying) para que terceros no puedan manipular la pagina, y el ultimo proceso es el treeshaking (sacudir el arbol) que sirve para eliminar archivos que no tienen uso en la carpeta
Los bundlers tambien sirven para proporcionar seguridad a la pagina, ya que divide el codigo en 2 partes, una PUBLICA y otra PRIVADA. La unica parte que se va a quedar
cargada en la memoria del navegador va a ser la PUBLICA, haciendo que cualquier tercero sin acceso a la pagina pueda ver ese contenido "limitado", y segun la regla de la encriptacion
al estar solo cargada la parte PUBLICA, NINGUN TERCERO CON INTENCIONES MALICIOSAS PUEDE INGRESAR A LOS ARCHIVOS PRIVADOS YA QUE ESTOS NO SE QUEDAN GUARDADOS EN MEMORIA.

Vite es un bundler, asi que cumple el mismo proposito que los demas blunders para la seguridad del codigo
El propio META dijo que NO SE DEBE USAR MAS ""CREATE REACT APP"" A LA HORA DE HACER UNA APP ya que esta obsoleto, ya que al usar este codigo utiliza webpacks
(manejador de paquetes de la web) haciendo que sea lento y tedioso. Por eso hoy en dia se utiliuza Vite.Js que utiliza Rollup (el nombre del blunder)
Vite utiliza los bundlers de Rollup y le agrega un sistema de plugins, permitiendo que se puedan agregar cosas más rapido, ejemplo:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
Con este codigo esta dando soporte para React (Vite latest), si queremeos agregarle testing,PWA(Progresive Web Aplication), variables de entorno, etc, se tienen que añadir los plugins los plugins

------------------------------------------------------------------------------------------------------------

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

Sistema de carpetas
Que es un "Strict Mode"?, Controla la amanera en la que funciona los componentes, creando un componente, luego lo renderiza y va a ver si el estado del componente duplicado
es el mismo que antes de renderizarse, es una forma para controlar el funcionamiento de un componente y luego de producción se quita.

Que es "createRoot"?; Es un metodo que viene de "react-dom/client", va a crear el lugar donde van a estar las bases de nuestra aplicacion, ademas va a renderizar algo por default
o mejor dicho un boostrap, ademas al lado del root hay un signo de exclamacion para que de el documentoID aunque este no existe.

Dentro de App se encuentra toda nuestra aplicacion, es una funcion que se exporta
¿Como funcionan los imports? si cambiamos el nombre de ambos App (pepito) por más que no coincida con el nombre del archivo va a funcionar igual, porque lo que dice el EXPORT
es distinto a lo del IMPORT, el export dice "export default App;".
Esto quiere decir que el archivo va a estar exportando lo que viene por defecto dentro de su archivo, asi que por más que se le cambie el nombre a lo que se va a 
importar, en este caso va a seguir funcionando debido a como esta declarado el export. ESTO SE HACE SIEMPRE QUE DE TODO EL CONTENIDO DE UN ARCHIVO SOLO UNA PARTE 
SEA IMPORTANTE.
Ah no ser de que tengas llaves, con las {} se especificaba que es lo que se quiere importar, si hacemos "import React from "react"" y luego lo queremos exportar 
a la aplicacion usamos REACT.StrictMode lo que estamos haciendo es exportar todo el react para usar una sola cosa, haciendo que se sobrecarguen los archivos.

Este tipo de estructura se lo conoce como una Single Page Aplication (SPA)

-----------------------------------------------------------------------------------------------------------------------------------------------

DETECCION DE CAMBIOS EN REACT
En React poemos encontrar algo llamado deteccion de cambios, cuando trabajamos en una SPA, una aplicacion que va a tener un index.html y en este identificamos un div que contiene un root
esto va a cambiar dinamicamente, hay una forma en la que react detecta los cambios, cosa que hacenb todas las librerias, freameworks. El tema es ver como cada uno lodetecta segun sus metodos

Que es un Trigger? Es un evento, cualquiera, qeu va a iniciar un procecso de render. Esto puede ser un boton, el estado de un componente, una llamada de una api,
Hay 2 tipos de Triggers, el primero es el inicial, es importante porque inicia todo el proceso para llegar a render. Primero se inicia un componente, se carga o se monta
y va a hacer que este se renderice. El segundo es el que hace que tenga Re-render, esto es peligroso ya que renderiza 2 veces luego de un cambio.

Proceso de render en React
React trqabaja con 2 DOM(Document Object Model), el DOM normal y el DOM Virtual. El normal escribe y renderiza el contenido del Html, al detectar un cambio, lo compara
dentro del DOM virtual, es una copia del DOM pero con los cambios hechos, una vez comparados, aplica los cambios y se ejecuta el Render.
¿Como se escribe un componente en React? Se escribe como una funcion
function Dashboard (){
    return (afnaifhnai);
}
¿Que es el Render? El render ejecuta funciones, los componmentes en React son renders ejecutando funciones
<Dashboard/> al llamarlo asi en el Html ejecuta la funcion del Dashboard

Un commit dentro de React es aplicar el cambio del DOM virtual al DOM real.

Trigger - Renderizado de contenido (componente) - Commit(Aplica el cambio)

---------------------------------------------------------------------------------------------------------------------------------------------------

COMPONENTES

Para que todos los procesos de deteccion de cambios en react funcionen deben existir los componentes
  <StrictMode>
    <App />
  </StrictMode>

  App es el componente root que da las bases de la app react, JSX es la capacidad de tener Html y logica dentro del mismo Html, logica de JavaScript, si contiene una X 
  el archivo significa que retorna Html con logica

  Un componente siempre tiene que ser la minima unidad de logica posible, es una propiedad o funcion que nosotros creamos para luego importar su estilo o 
  funcion a la app.tsx. Siempre se tiene que Atomizar los componentes ya que al minimizarlo lo maximo posible va a ser mas facil manipularlo y editarlo sin hacer
  grandes cambios, reutilizar, etc. Un componente Siempre tiene que tener la minima unidad logica posible y solo tiene que contener la logica que le pertenece
  Un componente es una funcion que se va a ejecutar y su resultado se va a implementar al HTML

las llaves muestran las propiedades que tiene el componente, y los : luego de estos muestra de donde viene, a esto se lo conoce como destructuring y es una buena practica
de JavaScript
export const Button = ({label,parenthMethod}:Props)

--------------------------------------------------------------------------------------------------------------------------------------------------

  UseState

Si queremos bindear una conexion entre render y contenido estamos hablando de un estado, para que un estado cambie primero se tiene que montar el componente
luego se cambia el estado y luego por un metodo asincrono se cambia tambien de estado.
UseState es un hook (gancho) de react, useState usa el estado para relacionar una variable para poder utilizarla en el render, esta tambien posee un metodo para modificar 
dicha variable y que esto triggeree un cambio de estado. Usa los estados a traves de un getter para que pueda renderizarlo.
Hay una regal dentro de React que se llama "Batching", si ejecutas varios cambios de estado al mismo timepo, este los va a agrupar y los va a ejecutar a todos al final

--------------------------------------------------------------------------------------------------------------------------------------------------

UseEffect

En esta clase vamos a ahcer una clasica peticion al backend, un clasico flujo para obtener informacion, mostrarlo en pantalla y controlar errores desde react. Cuando obtenemos una data 
tenemos que comunicarnos con un endpóint, este mismo es una entidad externa al componente (servidor, ejemplo). UseEffect es un hook, siempre que tenga un use es un hook (state y effect son 
propios de react) y luego estan los custom hooks, se usan para enganchar un estado de un componente. UseEffect nos va a ayudar a controlar los ciclos de vida de un componente, porque todo lo que ponga dentro
del metodo que tenemos lo va a hacer de x manera  (ejemplo: useEffect(()=>{},[])), o eso es lo que piensa todo el mundo, y tambien va a aceptar un arreglo de dependencias. 
Esta logica se ejecuta cuando hay varios momentos especificos: cuando se monta el componente, cuando se modifique uno de los valores del state dentro del arreglo de dependencias, y cuando se destruen los componentes.
Si no ponemos el arreglo de dependencias esto va a generar que se ejecute cada vez que cambie cualquier valor del estado. Dentro de este metodo se puede hacer un return para manejar la memoria de manera manual.
Esto se utiliza para manejar el estado de la memoria.
EL USO CORRECTO DE UseEffect SIRVE PARA SINCRONIZAR CON ENTIDADES EXTERNAS (EXTERNOS AL ARCHIVO QUE ESATMOS TARBAJANDO), se usa cuando tenemos que pegarlo con un endpoint, operaciones asincronas, parametros de entrada, siempre cuando algo viene desde afuera
de la aplicacion, como tambien un context, etc. Se puede usar mas de un UseEffect.

function App() {
  const [data, setData] = useState([])

  const fetchData = async () => {
    try {
      const response = await fetch("https://api.example.com/data")}
      const jsonData = await response.json()
      setData(jsonData)
  } catch (err) {
    console.error(err)
  }

  useEffect(()=>{
    fetchData()
  },[data])
}

Primero se setean los estados, luego se crean los metodos, cada uno separado por un enter y luego se puede ver lo que pasa dentro de useEffect, en las ultimas 3 lineas de codigo del ejemplo
podemos ver que tenemos un useEffect que ejecuta un metodo,y cada vez que data cambie se hace un fetchData, pero esto esta mal ya que puede generar un bucle infinito
En este caso el data al final no se pone para evitar este bucle infinito.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Custom hooks

Los hooks siemopre tienen un use al inicio, se pueden crear custom hooks en una carpeta a parte dentro de src
Se declaran los tipos dentro del custom y no se exportan/importan porque solamente se usan en este mismo

Esta logica de app.tsx pertenece al componente ya que es lo que este mismo debe realizar

import './App.css';
import { useFetch } from './hooks';

const url = "https://api.example.com/data";

function App() {
  const {data, error, loading} = useFetch(url)

  if (loading){
    return <div>Cargando...</div>
  }

  if (error) {
    return <div>Ups, ah ocurrido un error: {error.message}</div>
  }

  return(<div>{JSON.stringify(data)}</div>)
}

export default App;

Mientras que este codigo que pertenece al custom hook es logica que pertenece al fetch, no al componente, ya que el componente solo va a devolver resultados, el que realiza la logica es el 
custom hook

import { useEffect, useState } from "react";

type Data<T> = T | null;
type ErrorType = Error | null;

interface Params<T> {
    data : Data<T>;
    loading : boolean;
    error: ErrorType;
}

export const useFetch = <T>(url: string): Params<T> => {
    const [data, setData] = useState<Data<T>>(null)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState<ErrorType>(null)

    useEffect(() => {
        let controller = new AbortController();
        setLoading(true)

        const fetchData = async () => {
            try {
                const response = await fetch(url, controller);
                if (!response.ok) {
                    throw new Error("Error en la peticion")
                }

                const jsonData: T = await response.json();
                setData(jsonData)
                setError(null)
            }catch (err){
                setError(err as Error)
            }finally{
                setLoading(false)
            }
        }
        fetchData();

        return () => {
            controller.abort();
        }
    }, [url])
    return {data, loading, error}
}